When discussing which patterns to drop, we found that we still love them all. (Not really, I'm in favor of droppting
Singleton. Its use is almost always a design smell) - Erich Gamma

Motivation
    - For some components it only makes sense to have one instance in the system
        - Database repository
        - Object factory (static members or methods)
    - It is a big deal because the constructor call is expensive.
        - We want initialization to only happen once
        - We provide everyone with the same instance
    - We want to prevent anyone creating additional copies

Singleton
    A component which is instantiated only once

Singleton design pattern
    An implementation which prevents instantiating a component more than once

Summary
    - A constructor can choose what to return; we can keep returning same instance
    - Monostate: many instances, shared data
    - Directly depending on the Singleton is a bad idea; introduce a dependency instead